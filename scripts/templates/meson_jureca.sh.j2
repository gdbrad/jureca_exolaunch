#!/bin/bash
# template for computing mesons with chroma 

#SBATCH --nodes={{ meson_slurm_nodes }}
#SBATCH --partition=dc-gpu
#SBATCH --gpu-bind=none
#SBATCH --account=exotichadrons
#SBATCH -t {{ meson_chroma_minutes }}
#SBATCH --gres=gpu:4

eigs={{ run_path }}/eigs_sdb/eigs_numvecs{{ num_vecs }}_cfg{{ cfg_id }}.sdb
{
if [ ! -f "${eigs}" ]; then
  echo "matching distillation basis not found, exiting"
  exit 0
fi 
}

export OPENBLAS_NUM_THREADS={{ superbblas_threads }}
export OMP_NUM_THREADS={{ omp_threads }}
export CUDA_VISIBLE_DEVICES=0,1,2,3
CODE_DIR={{ code_dir }}
myenv=$CODE_DIR/env-new-jureca-gpu.sh
formenv=$CODE_DIR/env_extra.sh
source $myenv 
source $formenv
chroma=$CODE_DIR/install/chroma-quda-qdp-jit-double-nd4-cmake-superbblas-cuda/bin/chroma

BASE_DIR={{ run_path }}
if [ ! -d "$BASE_DIR/res/log/meson" ]; then
  mkdir -p "$BASE_DIR/res/log/meson";
fi 
if [ ! -d "$BASE_DIR/res/out/meson" ]; then
  mkdir -p "$BASE_DIR/res/out/meson";
fi 

log=$BASE_DIR/res/log/meson/meson_{{ meson_nvec }}_cfg{{ cfg_id }}.log
in=$BASE_DIR/ini-meson/cnfg{{ cfg_id }}/numvec{{ meson_nvec }}/meson_{{ meson_nvec }}_cfg{{ cfg_id }}.ini.xml
out=$BASE_DIR/res/out/meson/meson_{{ meson_nvec }}_cfg{{ cfg_id }}.out.xml
output="$BASE_DIR/chroma_out/meson_{{ meson_nvec }}_cfg{{ cfg_id }}.out"

export OPTS=" -geom {{ meson_chroma_geometry|join(' ') }}"
echo "START  "$(date "+%Y-%m-%dT%H:%M")
srun -n 8 -c 16 $chroma $OPTS -i $in -o $out -l $log > $output 2>&1
echo "FINISH JOB "$(date "+%Y-%m-%dT%H:%M")
